/* A mobile first adaptation from http://css-tricks.com/dont-overthink-it-grids/ */

// Mixin to create the columns
@mixin grid()  {
  // Sets the width of one column for desktop
  $desktop-column-width: 100 / $desktop-columns-number;
  $mobile-column-width: 100 / $mobile-columns-number;

  // Creates the widths for each mobile column
  @if $mobile-columns-number > 0 {
    @for $i from 1 to $mobile-columns-number + 1 {
      #{"." + $mobile-column-name + "-" + $i} {
        width: #{$mobile-column-width * $i + "%"};
      }
    }
  }

  // Creates the widths for each desktop column
  @media only screen and (min-width: $vp-desktop) {
    @for $i from 1 to $desktop-columns-number + 1 {
      #{"." + $desktop-column-name + "-" + $i} {
        width: #{$desktop-column-width * $i + "%"};
      }
    }
  }

}

// Resets the Box model. If you don't want to, you'll have to use CSS Calc
*, *:after, *:before {
  box-sizing: border-box;
}

// The grid container
#{"." + $grid-class} {
  margin: 0 0 $mobile-gutter 0;
  width: 100%;
  @media only screen and (min-width: $vp-desktop) {
      margin: 0 0 $desktop-gutter 0;
  }
  &:after {
    @extend %clearfix;
  }
}

[class*="#{$mobile-column-name + "-"}"],
[class*="#{$desktop-column-name + "-"}"] {
  position: relative;
  float: left;
  padding-right: $mobile-gutter / 2;
  padding-left: $mobile-gutter / 2;
  min-width: 1px;
  min-height: 1px;
  @media only screen and (min-width: $vp-desktop) {
    padding-right: $desktop-gutter / 2;
    padding-left: $desktop-gutter / 2;
  }
}

// Creates the columns
@include grid();

// Opt for no padding between the columns
.grid.no-padding {
  > [class*="#{$mobile-column-name + "-"}"],
  > [class*="#{$desktop-column-name + "-"}"] {
    padding: 0;
  }
}
